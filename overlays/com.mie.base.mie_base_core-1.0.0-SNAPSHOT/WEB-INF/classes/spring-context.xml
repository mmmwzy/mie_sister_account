<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<!-- 获取springcontext的工具类，由于很多类启东的时候，需要这个，所以尽量往前 -->
	<bean class="com.mie.base.utils.SpringContextHolder" />

	<bean id="defaultThreadPool"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="200" />
		<property name="maxPoolSize" value="500" />
		<property name="queueCapacity" value="200000" />
		<property name="keepAliveSeconds" value="3000" />
	</bean>

	<!-- 对于spring的事件监听器, 使用多线程来响应事件 -->
	<bean id="eventMulticaster"
		class="org.springframework.context.event.SimpleApplicationEventMulticaster">
		<property name="taskExecutor" ref="defaultThreadPool"></property>
	</bean>

	<!-- 引入jdbc配置文件 -->
	<bean id="sysConfig"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:/conf.properties</value>
			</list>
		</property>
	</bean>
	<context:property-placeholder
		ignore-unresolvable="true" properties-ref="sysConfig" />

	<!-- 开启bean类的注解支持 -->
	<context:annotation-config />

	<!-- 扫描文件自动注入service开启 -->
	<context:component-scan base-package="com.mie" />

	<!-- 开启AOP的注解支持的 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 数据源配置 -->
	<!-- 方式1：容器JNDI数据源 <jee:jndi-lookup id="dataSource" jndi-name="jdbc/weimobDB"/> -->

	<!-- 方式2：c3p0连接池数据源 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${db.driver.class}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="initialPoolSize" value="5" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<property name="maxStatements" value="100" />
		<property name="maxIdleTime" value="3600" />
		<property name="acquireIncrement" value="2" />
		<property name="acquireRetryAttempts" value="10" />
		<property name="acquireRetryDelay" value="600" />
		<property name="testConnectionOnCheckin" value="true" />
		<property name="idleConnectionTestPeriod" value="1200" />
		<property name="checkoutTimeout" value="30000" />
	</bean> -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="200" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j2" />
	</bean>

	<!-- 开启注解事务功能 -->
	<tx:annotation-driven />

	<!-- 定义一个默认的事务隔离级别和传播级别 -->
	<bean id="transactionDefinition"
		class="org.springframework.transaction.support.DefaultTransactionDefinition">
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
		<property name="isolationLevelName" value="ISOLATION_READ_COMMITTED" />
	</bean>

	<!-- 开启spring的事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- myBatis 工厂类配置 SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		autowire="byName">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.els.**.entity" />
		<property name="configLocation" value="/WEB-INF/classes/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:com.mie.**.dao" />
		<!-- <property name="basePackage" value="cn.wechat.**.domain" /> not support 
			wildcard -->
	</bean>

	<!-- 扫描 myBatis 的mapper组件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mie.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

</beans>
